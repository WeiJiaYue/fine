package ${controllerPkg};


import com.shop.manage.pojo.${tableInfo.className};
import com.shop.manage.pojo.MUser;
import ${servicePkg}.${tableInfo.className}Service;

import com.lincomb.shop.util.PageUtil;
import com.lincomb.shop.constant.Constants;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.apache.log4j.Logger;
import org.apache.commons.lang3.StringUtils;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.http.MediaType;
import javax.servlet.http.HttpServletRequest;
import java.util.Map;
import java.util.HashMap;
import java.util.Enumeration;




/**
 *  auto generated by generation tools v1.0.0
 */
@Controller
@RequestMapping("/${tableInfo.entityName}")
public class ${tableInfo.className}Controller extends BaseController {

    private static final Logger logger = Logger.getLogger(${tableInfo.className}.class);


    @Autowired
    private ${tableInfo.className}Service ${tableInfo.entityName}Service;



    @RequestMapping(value = "jumpTo${tableInfo.className}List", method = RequestMethod.GET)
	public String jumpTo${tableInfo.className}List() {
		return "${tableInfo.entityName}/${tableInfo.entityName}";
	}


	@RequestMapping(value = "get${tableInfo.className}PageList", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	@ResponseBody
	public String get${tableInfo.className}PageList (HttpServletRequest request) {
		PageInfo<${tableInfo.className}> pageList = ${tableInfo.entityName}Service.get${tableInfo.className}PageList(convertParamsToMap(request));
		return PageUtil.getAssemblingData(pageList.getPages(), pageList.getTotal(),pageList.getList());
	}





    @RequestMapping(value = "get")
    @ResponseBody
    public ${tableInfo.className} get(String id) {
        ${tableInfo.className} ${tableInfo.entityName} = new ${tableInfo.className}();
        if (StringUtils.isNotBlank(id)) {
           ${tableInfo.entityName}= ${tableInfo.entityName}Service.get(id);
        }
        return ${tableInfo.entityName};
    }

    @RequestMapping(value = "create")
	@ResponseBody
	public Map<String,String> create(${tableInfo.className} ${tableInfo.entityName}) {
		Map<String,String> resultMap = new HashMap<>();
		try {
		    if (${tableInfo.entityName}!=null) {
		        MUser user = getUser();
                ${tableInfo.entityName}.setCreateTime(user.getCreateTime());
                ${tableInfo.entityName}.setCreateUser(user.getCreateUser());
                int result = ${tableInfo.entityName}Service.save(${tableInfo.entityName});
                assemblyResultSet(resultMap, result, "delete");
            }
		} catch (Exception e) {
			resultMap.put("resultCode", Constants.EXCEPTION_CODE);
			resultMap.put("resultMsg","internal error");
			logger.error("create ${tableInfo.className} error:"+e);
		}
		return resultMap;
	}


    @RequestMapping(value = "update")
	@ResponseBody
	public Map<String,String> update(${tableInfo.className} ${tableInfo.entityName}) {
		Map<String,String> resultMap = new HashMap<>();
		try {
		    if (${tableInfo.entityName}!=null) {
		        MUser user = getUser();
                ${tableInfo.entityName}.setUpdateTime(user.getUpdateTime());
                ${tableInfo.entityName}.setUpdateUser(user.getUpdateUser());
                int result = ${tableInfo.entityName}Service.update(${tableInfo.entityName});
                assemblyResultSet(resultMap, result, "delete");
            }
		} catch (Exception e) {
			resultMap.put("resultCode", Constants.EXCEPTION_CODE);
			resultMap.put("resultMsg","internal error");
			logger.error("update ${tableInfo.className} error:"+e);
		}
		return resultMap;
	}


	@RequestMapping(value = "delete")
    @ResponseBody
    public Map<String,String> delete(String id) {
    	Map<String,String> resultMap = new HashMap<>();
    	try {
    	    if (StringUtils.isNotEmpty(id)) {
                int result = ${tableInfo.entityName}Service.delete(id);
                assemblyResultSet(resultMap, result, "delete");
            }
    	} catch (Exception e) {
   			resultMap.put("resultCode", Constants.EXCEPTION_CODE);
   			resultMap.put("resultMsg","internal error");
   			logger.error("delete ${tableInfo.className} error:"+e);
   		}
   		return resultMap;
    }


    /**
	 * @Author louis.yu
	 * @param request
	 * @return
	 */
	private Map<String,Object> convertParamsToMap(HttpServletRequest request){
		Enumeration enums = request.getParameterNames();
		Map<String,Object> params =new HashMap<>();
		while(enums.hasMoreElements()){
			String key =(String)enums.nextElement();
			params.put(key,request.getParameter(key));
		}
		return params;
	}

	private void assemblyResultSet(Map<String, String> resultMap, int result, String operation) {
        if (result >= 1) {
            resultMap.put("resultCode", Constants.SUCCESS_CODE);
            resultMap.put("resultMsg", operation + " successfully");
        } else {
            resultMap.put("resultCode", Constants.ERROR_CODE);
            resultMap.put("resultMsg", operation + " failure");
        }
    }

}
